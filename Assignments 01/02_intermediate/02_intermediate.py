# -*- coding: utf-8 -*-
"""02_intermediate

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YDGpaN3oQUoN5DMgPo9k2umFWXXwTXJ

# 02_intermediate

# `Control Flow for Console`
## **HIGH-LOW GAME**
"""

import random

# Constants
NUM_ROUNDS = 5  # Total number of rounds the player will play
MIN_VALUE = 1  # Minimum possible number for both player and computer
MAX_VALUE = 100  # Maximum possible number for both player and computer

def main():
    print("Welcome to the High-Low Game!")
    print("--------------------------------")

    score = 0  # Initialize score

    # Play the game for NUM_ROUNDS
    for round_num in range(1, NUM_ROUNDS + 1):
        # Generate random numbers for the player and the computer
        player_number = random.randint(MIN_VALUE, MAX_VALUE)
        computer_number = random.randint(MIN_VALUE, MAX_VALUE)

        # Display the round number and the player's number
        print(f"\nRound {round_num}")
        print(f"Your number is {player_number}")

        # Get the player's guess (higher or lower), or check for empty input to end the game
        guess = input("Do you think your number is higher or lower than the computer's?: ").lower()

        # If the player presses enter without typing anything, end the game
        if guess == "":
            print("Game ended. Thanks for playing!")
            break

        # Validate the input
        while guess not in ['higher', 'lower']:
            guess = input("Please enter either 'higher' or 'lower': ").lower()

        # Game logic: Check if the player's guess matches the truth
        if (guess == 'higher' and player_number > computer_number) or (guess == 'lower' and player_number < computer_number):
            print(f"You were right! The computer's number was {computer_number}")
            score += 1  # Increase score
        else:
            print(f"Aww, that's incorrect. The computer's number was {computer_number}")

        # Print the current score
        print(f"Your score is now {score}")

    # End game message and evaluate performance
    print("\nThanks for playing!")
    print(f"Your final score is {score}")

    if score == NUM_ROUNDS:
        print("Wow! You played perfectly!")
    elif score >= NUM_ROUNDS // 2:
        print("Good job, you played really well!")
    else:
        print("Better luck next time!")

# Ensure the main function is called when the script is run
if __name__ == '__main__':
    main()

"""# `Intro to Python`
# **Problem-Planetary Weight Calculator**
"""

def main():
    # Dictionary to store the gravity percentages for each planet
    planet_gravity = {
        "Mercury": 37.6,
        "Venus": 88.9,
        "Mars": 37.8,
        "Jupiter": 236.0,
        "Saturn": 108.1,
        "Uranus": 81.5,
        "Neptune": 114.0
    }

    # Milestone 1: Ask for Earth weight
    earth_weight = float(input("Enter a weight on Earth: "))

    # Milestone 2: Ask for the name of the planet
    planet = input("Enter a planet: ")

    # Check if the planet is in the dictionary
    if planet in planet_gravity:
        # Calculate the equivalent weight on the selected planet
        equivalent_weight = earth_weight * (planet_gravity[planet] / 100)
        # Print the result rounded to 2 decimal places
        print(f"The equivalent weight on {planet}: {round(equivalent_weight, 2)}")
    else:
        print("Invalid planet name. Please enter a valid planet name from the list.")

if __name__ == "__main__":
    main()

"""# `Lists and Dicts`

# Problem #1: List Practice
"""

def main():
    # Create a list called fruit_list with some fruits
    fruit_list = ['apple', 'banana', 'orange', 'grape', 'pineapple']

    # Print the length of the list
    print("Length of the list:", len(fruit_list))

    # Add 'mango' at the end of the list
    fruit_list.append('mango')

    # Print the updated list
    print("Updated fruit list:", fruit_list)

if __name__ == "__main__":
    main()

"""## **Problem #2: Index Game**"""

def access_element(lst, index):
    """Returns the element at the specified index, or an error message if out of range."""
    if 0 <= index < len(lst):
        return lst[index]
    else:
        return "Index out of range."

def modify_element(lst, index, new_value):
    """Replaces the element at the specified index with a new value, or returns an error message if out of range."""
    if 0 <= index < len(lst):
        lst[index] = new_value
        return lst
    else:
        return "Index out of range."

def slice_list(lst, start_index, end_index):
    """Returns a new list with elements from start_index to end_index (not inclusive), handles out of range indices."""
    if 0 <= start_index < len(lst) and 0 <= end_index <= len(lst):
        return lst[start_index:end_index]
    else:
        return "Invalid indices."

def main():
    # Initialize a sample list
    sample_list = [10, "apple", 30, "banana", 50]

    print("Welcome to the Index Game!")
    while True:
        print("\nOperations:")
        print("1. Access an element")
        print("2. Modify an element")
        print("3. Slice the list")
        print("4. Exit")

        choice = input("Select an operation (1-4): ")

        if choice == '1':  # Accessing an element
            index = int(input("Enter the index to access: "))
            result = access_element(sample_list, index)
            print(f"Result: {result}")

        elif choice == '2':  # Modifying an element
            index = int(input("Enter the index to modify: "))
            new_value = input("Enter the new value: ")
            result = modify_element(sample_list, index, new_value)
            print(f"Updated list: {result}")

        elif choice == '3':  # Slicing the list
            start_index = int(input("Enter the start index: "))
            end_index = int(input("Enter the end index: "))
            result = slice_list(sample_list, start_index, end_index)
            print(f"Sliced list: {result}")

        elif choice == '4':  # Exit the game
            print("Thanks for playing! Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid operation (1-4).")

if __name__ == "__main__":
    main()